package org.example.authservice.controller;

import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.example.authservice.dto.RegisterDto;
import org.example.authservice.dto.UserDto;
import org.example.authservice.security.CustomUserDetails;
import org.example.authservice.service.UserService;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/users")
@SecurityRequirement(name = "bearerAuth")
public class UserController {

    private final UserService userService;

    public UserController(UserService userService) {
        this.userService = userService;
    }

    /** üîπ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ ADMIN) */
    @GetMapping
    public List<UserDto> getAll(@AuthenticationPrincipal CustomUserDetails currentUser) {
        ensureAdmin(currentUser);
        return userService.getAll();
    }

    /** üîπ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ id (ADMIN –∏–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü) */
    @GetMapping("/{id}")
    public UserDto getById(@PathVariable Long id,
                           @AuthenticationPrincipal CustomUserDetails currentUser) {
        ensureOwnerOrAdmin(currentUser, id);
        return userService.getById(id);
    }

    /** üîπ –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ADMIN –∏–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü) ‚Üí —Å–æ–±—ã—Ç–∏–µ UPDATED */
    @PutMapping("/{id}")
    public UserDto update(@PathVariable Long id,
                          @RequestBody RegisterDto dto,
                          @AuthenticationPrincipal CustomUserDetails currentUser) {
        ensureOwnerOrAdmin(currentUser, id);
        return userService.updateAndPublish(id, dto);
    }

    /** üîπ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ADMIN –∏–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü) ‚Üí —Å–æ–±—ã—Ç–∏–µ DELETED */
    @DeleteMapping("/{id}")
    public void delete(@PathVariable Long id,
                       @AuthenticationPrincipal CustomUserDetails currentUser) {
        ensureOwnerOrAdmin(currentUser, id);
        userService.deleteAndPublish(id);
    }

    // ================= üîπ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ =================
    private void ensureAdmin(CustomUserDetails currentUser) {
        if (!currentUser.hasRole("ADMIN")) {
            throw new SecurityException("Access denied: ADMIN only");
        }
    }

    private void ensureOwnerOrAdmin(CustomUserDetails currentUser, Long targetUserId) {
        if (!currentUser.hasRole("ADMIN") && !currentUser.getId().equals(targetUserId)) {
            throw new SecurityException("Access denied: must be ADMIN or resource owner");
        }
    }
}
