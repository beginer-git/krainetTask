package org.example.notificationservice.listener;

import org.example.notificationservice.dto.UserEventDto;
import org.example.notificationservice.model.Role;
import org.example.notificationservice.repository.UserRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.mail.MailException;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.stereotype.Component;

import java.util.List;

@Component
public class UserEventListener {

    private static final Logger log = LoggerFactory.getLogger(UserEventListener.class);

    private final JavaMailSender mailSender;
    private final UserRepository userRepository;

    public UserEventListener(JavaMailSender mailSender, UserRepository userRepository) {
        this.mailSender = mailSender;
        this.userRepository = userRepository;
    }

    @RabbitListener(queues = "user.queue")
    public void handleUserEvent(UserEventDto event) {
        log.info("üì© [EVENT RECEIVED] Queue='user.queue'");
        log.info("üì© –°–æ–±—ã—Ç–∏–µ: {} | Username: {} | Email: {} | Role: {}",
                event.getAction(), event.getUsername(), event.getEmail(), event.getRole());
        log.debug("üì© –ü–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç UserEventDto: {}", event);

        String actionText = switch (event.getAction()) {
            case CREATED -> "–°–æ–∑–¥–∞–Ω";
            case UPDATED -> "–ò–∑–º–µ–Ω—ë–Ω";
            case DELETED -> "–£–¥–∞–ª—ë–Ω";
        };

        String subject = String.format("–°–æ–±—ã—Ç–∏–µ: %s –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s", actionText, event.getUsername());
        String body = String.format(
                "–°–æ–±—ã—Ç–∏–µ: %s%n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s%n–ü–∞—Ä–æ–ª—å: %s%n–ü–æ—á—Ç–∞: %s%n–†–æ–ª—å: %s",
                actionText,
                event.getUsername(),
                event.getPassword() != null ? event.getPassword() : "(–Ω–µ —É–∫–∞–∑–∞–Ω)",
                event.getEmail(),
                event.getRole() != null ? event.getRole() : "(–Ω–µ —É–∫–∞–∑–∞–Ω)"
        );

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        List<String> adminEmails = userRepository.findByRole(Role.ADMIN)
                .stream()
                .map(user -> user.getEmail())
                .toList();

        for (String adminEmail : adminEmails) {
            boolean sent = sendEmailWithRetry(adminEmail, subject, body, 3, 2000, event.getUsername());

            if (sent) {
                log.info("‚úÖ –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {}", adminEmail);
            } else {
                log.error("‚ùå –ü–∏—Å—å–º–æ –ù–ï —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {}", adminEmail);
            }
        }

        log.info("üì¨ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–º –ø—ã—Ç–∞–ª–∏—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ: {}",
                String.join(", ", adminEmails));
    }

    private boolean sendEmailWithRetry(String to, String subject, String text,
                                       int maxAttempts, long delayMs, String username) {
        int attempts = 0;

        while (attempts < maxAttempts) {
            try {
                attempts++;
                sendEmail(to, subject, text);
                log.info("üìß –ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–ø–æ–ø—ã—Ç–∫–∞ {} –∏–∑ {}) –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {}", attempts, maxAttempts, to);
                return true;
            } catch (MailException ex) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ (–ø–æ–ø—ã—Ç–∫–∞ {} –∏–∑ {}) –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {} ({})",
                        attempts, maxAttempts, to, ex.getMessage());
            } catch (Exception ex) {
                log.error("‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞ (–ø–æ–ø—ã—Ç–∫–∞ {} –∏–∑ {}) –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {} ({})",
                        attempts, maxAttempts, to, ex.getMessage());
            }

            if (attempts < maxAttempts) {
                try {
                    Thread.sleep(delayMs);
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                    log.error("‚ö†Ô∏è Retry –ø—Ä–µ—Ä–≤–∞–Ω –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {} ({})", to, username);
                    return false;
                }
            }
        }

        log.error("üö® –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {} –ø–æ—Å–ª–µ {} –ø–æ–ø—ã—Ç–æ–∫", to, maxAttempts);
        return false;
    }

    private void sendEmail(String to, String subject, String text) {
        SimpleMailMessage message = new SimpleMailMessage();
        message.setTo(to);
        message.setSubject(subject);
        message.setText(text);
        message.setFrom("no-reply@krainet.local");
        mailSender.send(message);
    }
}
